// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api.proto

package perseus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PerseusClient is the client API for Perseus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PerseusClient interface {
	// Add adds stuff
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error)
	// Delete deletes stuff
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error)
	// Get gets stuff
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
}

type perseusClient struct {
	cc grpc.ClientConnInterface
}

func NewPerseusClient(cc grpc.ClientConnInterface) PerseusClient {
	return &perseusClient{cc}
}

func (c *perseusClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error) {
	out := new(AddResp)
	err := c.cc.Invoke(ctx, "/perseus.Perseus/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perseusClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, "/perseus.Perseus/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perseusClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, "/perseus.Perseus/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerseusServer is the server API for Perseus service.
// All implementations should embed UnimplementedPerseusServer
// for forward compatibility
type PerseusServer interface {
	// Add adds stuff
	Add(context.Context, *AddReq) (*AddResp, error)
	// Delete deletes stuff
	Delete(context.Context, *DeleteReq) (*DeleteResp, error)
	// Get gets stuff
	Get(context.Context, *GetReq) (*GetResp, error)
}

// UnimplementedPerseusServer should be embedded to have forward compatible implementations.
type UnimplementedPerseusServer struct {
}

func (UnimplementedPerseusServer) Add(context.Context, *AddReq) (*AddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPerseusServer) Delete(context.Context, *DeleteReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPerseusServer) Get(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafePerseusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PerseusServer will
// result in compilation errors.
type UnsafePerseusServer interface {
	mustEmbedUnimplementedPerseusServer()
}

func RegisterPerseusServer(s grpc.ServiceRegistrar, srv PerseusServer) {
	s.RegisterService(&Perseus_ServiceDesc, srv)
}

func _Perseus_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerseusServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perseus.Perseus/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerseusServer).Add(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Perseus_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerseusServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perseus.Perseus/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerseusServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Perseus_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerseusServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perseus.Perseus/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerseusServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Perseus_ServiceDesc is the grpc.ServiceDesc for Perseus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Perseus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "perseus.Perseus",
	HandlerType: (*PerseusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Perseus_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Perseus_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Perseus_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
